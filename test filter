import os
import csv
import tkinter as tk
from tkinter import filedialog
from collections import defaultdict
from datetime import datetime, timedelta

def browse_files():
    files = filedialog.askopenfilenames(filetypes=[("CSV files", "*.csv")])
    return list(files)

def browse_folder():
    folder = filedialog.askdirectory()
    return folder

def add_one_year(date):
    try:
        # Try to add one year to the date
        return date.replace(year=date.year + 1)
    except ValueError:
        # Handle leap year edge case (e.g., Feb 29 to Feb 28)
        return date.replace(year=date.year + 1, day=28)

def calculate_declaration_status_and_reminders(creation_date, declaration_expired):
    today = datetime.today()

    # If creation_date is empty, return the invitation status
    if not creation_date.strip():
        return "Invitar a declarar"

    try:
        # Strip extra spaces and handle both date and datetime formats
        creation_date = creation_date.strip()
        # Parse with time if provided, otherwise parse just the date
        if " " in creation_date:
            creation_date_dt = datetime.strptime(creation_date, "%d/%m/%Y %H:%M")
        else:
            creation_date_dt = datetime.strptime(creation_date, "%d/%m/%Y")
    except ValueError:
        # If there's a problem parsing the date, treat as needing an invitation
        return "Invitar a declarar"

    # Add exactly one year to the creation_date to get the next due date
    next_due_date = add_one_year(creation_date_dt)
    
    # Calculate the difference between today and next_due_date
    delta = next_due_date - today
    
    # Normalize declaration_expired to lower case and strip any extra spaces
    declaration_expired = declaration_expired.strip().lower()
    
    # If expired, mark as "Expirado"
    if declaration_expired == 'expired':
        return "Expirado"
    
    # Calculate months and days until expiration
    if delta.days > 0:
        months_to_expiry = (next_due_date.year - today.year) * 12 + (next_due_date.month - today.month) - (1 if today.day > next_due_date.day else 0)
        remaining_days = (next_due_date - today.replace(month=today.month + months_to_expiry)).days

        # If no months left, show only days
        if months_to_expiry == 0:
            return f"{delta.days} días para que expire"
        else:
            return f"{months_to_expiry} mes{'es' if months_to_expiry > 1 else ''} y {remaining_days} día{'s' if remaining_days != 1 else ''} para que expire"
    else:
        return "Expirado"
