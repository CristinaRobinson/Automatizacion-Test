import os
import csv
import tkinter as tk
from tkinter import filedialog
from collections import defaultdict
from datetime import datetime

def browse_files():
    files = filedialog.askopenfilenames(filetypes=[("CSV files", "*.csv")])
    return list(files)

def browse_folder():
    folder = filedialog.askdirectory()
    return folder

def calcular_fase_recordatorio(fecha_entrada):
    hoy = datetime.today()
    
    try:
        fecha_entrada_dt = datetime.strptime(fecha_entrada, "%d/%m/%Y")
    except ValueError:
        print(f"Error en el formato de fecha: {fecha_entrada}")
        return "Fecha inválida"

    dias_desde_entrada = (hoy - fecha_entrada_dt).days
    
    if dias_desde_entrada <= 7:
        return f"Primera fase: Invitación (primeros 7 días) ({dias_desde_entrada} días desde la entrada)"
    elif dias_desde_entrada > 7 and dias_desde_entrada < 30:
        dias_desde_ultimo_recordatorio = dias_desde_entrada - 7
        return f"Segunda fase: Reminder antes de que se acabe el mes ({dias_desde_ultimo_recordatorio} días desde el último recordatorio)"
    elif dias_desde_entrada >= 30 and dias_desde_entrada < 53:
        dias_desde_ultimo_recordatorio = dias_desde_entrada - 30
        return f"Tercera fase: Se acabó el mes, recordar ({dias_desde_ultimo_recordatorio} días desde el último recordatorio)"
    elif dias_desde_entrada >= 53 and dias_desde_entrada < 60:
        dias_desde_ultimo_recordatorio = dias_desde_entrada - 53
        return f"Cuarta fase: Reminder antes de que se acabe el segundo mes ({dias_desde_ultimo_recordatorio} días desde el último recordatorio)"
    elif dias_desde_entrada >= 60 and dias_desde_entrada < 83:
        dias_desde_ultimo_recordatorio = dias_desde_entrada - 60
        return f"Quinta fase: Comunicación con su N+1 ({dias_desde_ultimo_recordatorio} días desde el último recordatorio)"
    else:
        dias_desde_ultimo_recordatorio = dias_desde_entrada - 83
        return f"Quinta fase: Comunicación con su N+1 ({dias_desde_ultimo_recordatorio} días desde el último recordatorio)"

def process_moocs(files, folder):
    moocs_filter = ["ethics", "anticorruption"]  # Ensure case-insensitive comparison
    
    moocs_data = defaultdict(lambda: {'moocs_pendientes': set(), 'fecha': '', 'email': '', 'job_function': '', 'work_location': '', 'business_group': '', 'division': '', 'bau': '', 'fase_recordatorio': ''})

    for file in files:
        if file.endswith('.csv'):
            with open(file, newline='') as csv_file:
                reader = csv.DictReader(csv_file)
                
                for row in reader:
                    # Extract necessary data and normalize text
                    mooc_name = row.get('Mooc Name', '').strip().lower()
                    name = row.get('Name', '').strip()
                    email = row.get('Email', '').strip()
                    entry_date = row.get('Entry Date', '').strip()
                    job_function = row.get('Job Function', '').strip()
                    work_location = row.get('Work Location', '').strip()
                    business_group = row.get('Business Group', '').strip()
                    division = row.get('Division', '').strip()
                    bau = row.get('BAU', '').strip()
                    completion_status = row.get('Completion Status', '').strip().lower()

                    # Debug print statements
                    print(f"Processing row - Name: {name}, Mooc Name: {mooc_name}, Completion Status: {completion_status}")

                    # Check if the course is in the filtered list and is not completed
                    if mooc_name in moocs_filter and completion_status != "completed":
                        # Add unique pending MOOCs
                        moocs_data[name]['moocs_pendientes'].add(mooc_name.capitalize())  # Capitalize to display correctly
                        moocs_data[name]['email'] = email
                        moocs_data[name]['job_function'] = job_function
                        moocs_data[name]['work_location'] = work_location
                        moocs_data[name]['business_group'] = business_group
                        moocs_data[name]['division'] = division
                        moocs_data[name]['bau'] = bau
                        
                        # Calculate reminder phase based on entry date
                        if entry_date:
                            moocs_data[name]['fecha'] = entry_date
                            moocs_data[name]['fase_recordatorio'] = calcular_fase_recordatorio(entry_date)

    # Save results to CSV
    with open(os.path.join(folder, 'moocs_resultados.csv'), 'w', newline='') as results_file:
        writer = csv.writer(results_file)
        writer.writerow(['Name', 'Email', 'Job Function', 'Work Location', 'Business Group', 'Division', 'BAU', 'Moocs Pendientes', 'Fase de Recordatorio'])
        
        # Write filtered and processed results
        for name, info in moocs_data.items():
            moocs_pendientes = ', '.join(info['moocs_pendientes'])
            writer.writerow([
                name, info['email'], info['job_function'], info['work_location'],
                info['business_group'], info['division'], info['bau'],
                moocs_pendientes, info['fase_recordatorio']
            ])

def process_ecoi(files, folder):
    ecoi_data = defaultdict(lambda: {'fecha': '', 'email': '', 'job_function': '', 'work_location': '', 'business_group': '', 'fase_recordatorio': '', 'declaration_status': '', 'creation_date': ''})

    for file in files:
        if file.endswith('.csv'):
            with open(file, newline='') as csv_file:
                reader = csv.DictReader(csv_file)
                
                for row in reader:
                    name = row.get('Name', row.get('employee_name', ''))
                    email = row.get('Email', row.get('employee_email', ''))
                    job_function = row.get('Job Function', '')
                    work_location = row.get('Work Location', '')
                    business_group = row.get('Business Group', row.get('bg', ''))
                    entry_date = row.get('Entry Date', '')
                    declaration_status = row.get('declaration_status', '')
                    creation_date = row.get('creation_date', '')
                    
                    if not name:
                        continue

                    ecoi_data[name]['email'] = email
                    ecoi_data[name]['job_function'] = job_function
                    ecoi_data[name]['work_location'] = work_location
                    ecoi_data[name]['business_group'] = business_group
                    ecoi_data[name]['declaration_status'] = declaration_status
                    ecoi_data[name]['creation_date'] = creation_date
                    
                    if entry_date:
                        ecoi_data[name]['fecha'] = entry_date
                        ecoi_data[name]['fase_recordatorio'] = calcular_fase_recordatorio(entry_date)

    with open(os.path.join(folder, 'ecoi_resultados.csv'), 'w', newline='') as results_file:
        writer = csv.writer(results_file)
        writer.writerow(['Name', 'Email', 'Fecha de Entrada', 'Job Function', 'Work Location', 'Business Group', 'Fase de Recordatorio', 'Declaration Status', 'Creation Date'])
        
        for name, info in ecoi_data.items():
            writer.writerow([
                name, info['email'], info['fecha'], info['job_function'],
                info['work_location'], info['business_group'], info['fase_recordatorio'],
                info['declaration_status'], info['creation_date']
            ])

def button_moocs_clicked():
    search_label.config(text="Iniciando procesamiento de MOOCs...")
    files = browse_files()
    folder = browse_folder()
    process_moocs(files, folder)
    search_label.config(text='Procesamiento de MOOCs completado. Resultados guardados en moocs_resultados.csv')

def button_ecoi_clicked():
    search_label.config(text="Iniciando procesamiento de ECOI...")
    files = browse_files()
    folder = browse_folder()
    process_ecoi(files, folder)
    search_label.config(text='Procesamiento de ECOI completado. Resultados guardados en ecoi_resultados.csv')

def search():
    window = tk.Toplevel(root)
    window.title("Opciones")
    window.geometry('350x150')
    window.configure(bg="#F1F1F1")
    
    option_label = tk.Label(window, text='Seleccione una opción:', font=('Helvetica', 14), bg="#F1F1F1", fg="#333")
    option_label.pack(pady=10)
    
    # Button for MOOCs
    button_moocs = tk.Button(window, text="Procesar MOOCs", command=button_moocs_clicked, 
                             font=('Helvetica', 12, 'bold'), bg="#6C63FF", fg="white", 
                             activebackground="#3B3B98", activeforeground="white", padx=10, pady=5,
                             bd=0, relief="flat")
    button_moocs.pack(pady=10)

    # Button for ECOI
    button_ecoi = tk.Button(window, text="Procesar ECOI", command=button_ecoi_clicked, 
                            font=('Helvetica', 12, 'bold'), bg="#FF6C63", fg="white", 
                            activebackground="#983B3B", activeforeground="white", padx=10, pady=5,
                            bd=0, relief="flat")
    button_ecoi.pack(pady=10)

root = tk.Tk()
root.title('MOOCs y ECOI Tracking')
root.geometry('400x300')
root.configure(bg="#2C3E50")

title_label = tk.Label(root, text="Seguimiento de MOOCs y ECOI", font=('Helvetica', 18, 'bold'), bg="#2C3E50", fg="white")
title_label.pack(pady=20)

search_label = tk.Label(root, text='', bg="#2C3E50", fg="white")
search_label.pack()

search_button = tk.Button(root, text='Iniciar procesamiento', command=search, 
                          font=('Helvetica', 14), bg="#3498DB", fg="white", 
                          activebackground="#2980B9", activeforeground="white", padx=10, pady=10,
                          bd=0, relief="flat")
search_button.pack(pady=20)

root.mainloop()
